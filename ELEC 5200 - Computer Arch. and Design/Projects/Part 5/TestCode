//initial testing
0001 001 000 001 001 //addi x1, x1, 1
0 01 000 000 000 011 //sw x1, x0, 0 (stores x1 into location 0 at memory)
0000 000 000 010 010 //lw x2, x0, 0 (stores MEM[0] into x2)

//arithmetic instructions
f4 r2  r1  f3  rd  op
0 010 001 000 001 000 //add x1, x2, x1 (expected 1+1 = 2)
0 001 001 001 000 000 //sub x1, x1, x0 (expected 2-2 = 0)
0 001 001 010 001 000 //and x1, x1, x1 (expected 2&2 = 1)
0 010 000 011 001 000 //or x0, x2, x1 (expected 2|0 = 2)
0 000 001 101 011 000 //sl x1, x3 (expected <<1 = 3)
0 000 011 110 001 000 //sr x3, x1 (expected >>3 = 1)

//immediate instructions
imm  r1   f3  rd  op
0001 001 001 001 001 //andi x1, x1, 1 (expected 1&1 = 1)
0001 000 010 001 001 // ori x1, x1, 1 (expected 1|1 = 1)

//branch instructions
im3 r2 r1 fun3 imm2 op
0 001 001 000 001 100 //beq x1, x1, 1 (expected branch 1&1)
0 000 001 001 001 100 //bgt x1, x0, 1 (expected 1>0)

//Jump
 imm  r1  f3  rd  op
0000 000 001 100 101 //jal x1, x4, 0 (expected jump 1 and put pc into x4)

//halt
xxxxxxxxxxxxx 111 //halt (expected pc halts)
